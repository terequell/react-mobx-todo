{"version":3,"sources":["index.module.css","serviceWorker.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","appStore","text","this","state","currentTaskInput","newTask","id","Date","now","tasksList","push","alert","key","filter","task","map","elem","localStorage","getItem","JSON","parse","observable","action","Task","observer","props","useState","isEdit","setEditmode","className","autoFocus","onBlur","onChange","e","target","value","editTask","onClick","deleteTask","TodoList","componentDidMount","store","getAppState","componentDidUpdate","setItem","stringify","updateInput","updateTaskInput","addTask","styles","todolist","placeholder","React","Component","App","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wFACAA,EAAOC,QAAU,CAAC,SAAW,wB,4MCWTC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,yCC+BAC,EAAW,I,2IAjCUC,GACrBC,KAAKC,MAAMC,iBAAmBH,I,gCAI9B,GAAoC,KAAhCC,KAAKC,MAAMC,iBAAyB,CACrC,IAAIC,EAAU,CACXC,GAAIC,KAAKC,MACTP,KAAMC,KAAKC,MAAMC,kBAEpBF,KAAKC,MAAMM,UAAUC,KAAKL,GAC1BH,KAAKC,MAAMC,iBAAmB,QAG9BO,MAAM,0D,iCAIOC,GAChBV,KAAKC,MAAMM,UAAYP,KAAKC,MAAMM,UAAUI,QAAO,SAAAC,GAAI,OAAIA,EAAKR,KAAOM,O,+BAGzDA,EAAKX,GACnBC,KAAKC,MAAMM,UAAUM,KAAI,SAAAC,GAAI,OAAIJ,IAAQI,EAAKV,GAAKU,EAAKf,KAAOA,EAAO,U,oCAIjC,OAAjCgB,aAAaC,QAAQ,UACtBhB,KAAKC,MAAMM,UAAYU,KAAKC,MAAMH,aAAaC,QAAQ,c,wCAjC5DG,K,wEAAmB,CACjBZ,UAAW,GACXL,iBAAkB,O,2CAGpBkB,K,+GAIAA,K,0GAcAA,K,2GAIAA,K,4GAIAA,K,2EAWEC,EAAQC,aAAS,SAACC,GAAW,IAAD,EAEHC,oBAAS,GAFN,mBAE1BC,EAF0B,KAElBC,EAFkB,KAa/B,OACM,6BACID,EACE,2BAAOE,UAAY,iBAAiBC,WAAa,EAAMC,OAAU,kBAAMH,GAAY,IAAQI,SARtF,SAACC,GACf,IAAIhC,EAAOgC,EAAEC,OAAOC,MACpBV,EAAMtB,MAAMiC,SAASX,EAAMnB,GAAIL,IAM2FkC,MAASV,EAAMxB,OAC9H,wBAAI4B,UAAY,kBAAkBQ,QAAW,kBAAMT,GAAY,KAAQH,EAAMxB,MAClF,4BAAQ4B,UAAY,cAAcQ,QAAW,kBAdlCzB,EAcmDa,EAAMnB,QAb1EmB,EAAMtB,MAAMmC,WAAW1B,GADP,IAACA,IAcX,qBAQI2B,EAAff,Y,6MAEEgB,kBAAoB,WACjB,EAAKf,MAAMgB,MAAMC,e,EAGpBC,mBAAqB,WAClB1B,aAAa2B,QAAQ,OAAQzB,KAAK0B,UAAU,EAAKpB,MAAMgB,MAAMtC,MAAMM,a,EAGtEqC,YAAc,SAACb,GACZ,IAAIhC,EAAOgC,EAAEC,OAAOC,MACpB,EAAKV,MAAMgB,MAAMM,gBAAgB9C,I,EAGpC+C,QAAU,WACP,EAAKvB,MAAMgB,MAAMO,W,wEAEX,IAAD,OACCP,EAAQvC,KAAKuB,MAAMgB,MACzB,OACG,yBAAKZ,UAAaoB,IAAOC,UACtB,yCACA,8BACG,2BAAOrB,UAAY,aAAaC,WAAa,EAAMqB,YAAe,uBAAwBnB,SAAY9B,KAAK4C,YAAaX,MAASM,EAAMtC,MAAMC,mBAC7I,4BAAQiC,QAAWnC,KAAK8C,QAASnB,UAAa,YAA9C,aAEH,wBAAIA,UAAY,mBACZY,EAAMtC,MAAMM,UAAUM,KAAI,SAAAD,GAAI,OAAI,kBAACS,EAAD,CAAMX,IAAOE,EAAKR,GAAIA,GAAMQ,EAAKR,GAAIL,KAAQa,EAAKb,KAAME,MAAS,EAAKsB,MAAMgB,iB,GA5B7FW,IAAMC,a,EAmCjCC,E,iLAEA,OACG,kBAAC,EAAD,CAAUb,MAASzC,Q,GAHVoD,IAAMC,WAQxBE,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDS3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.457b1313.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"todolist\":\"src_todolist__10sv3\"};","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React, {useState} from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {observable, action} from 'mobx';\r\nimport {observer} from 'mobx-react'\r\nimport styles from './index.module.css'\r\n\r\n// Класс состояния и обработчиков\r\n\r\nclass Store {\r\n   @observable state = {\r\n      tasksList: [],\r\n      currentTaskInput: '',\r\n   }\r\n\r\n   @action updateTaskInput(text) {\r\n      this.state.currentTaskInput = text;\r\n   }\r\n\r\n   @action addTask() {\r\n      if (this.state.currentTaskInput !== '') {\r\n         let newTask = {\r\n            id: Date.now(),\r\n            text: this.state.currentTaskInput\r\n         }\r\n         this.state.tasksList.push(newTask)\r\n         this.state.currentTaskInput = ''\r\n      }\r\n      else {\r\n         alert('You tried to add empty task. Please, type something.')\r\n      }\r\n   }\r\n\r\n   @action deleteTask(key) {\r\n      this.state.tasksList = this.state.tasksList.filter(task => task.id !== key)\r\n   }\r\n\r\n   @action editTask(key, text) {\r\n      this.state.tasksList.map(elem => key === elem.id ? elem.text = text : null)\r\n   }\r\n\r\n   @action getAppState() {\r\n      if (localStorage.getItem('todo') !== null){\r\n         this.state.tasksList = JSON.parse(localStorage.getItem('todo'))\r\n      }\r\n   }\r\n}\r\n\r\nconst appStore = new Store();\r\n\r\n// Компонент одного задания\r\n\r\nconst Task  = observer((props) => {\r\n\r\n   let [isEdit, setEditmode] = useState(false)\r\n\r\n   const deleteTask = (key) => {\r\n      props.state.deleteTask(key)\r\n   }\r\n\r\n   const editTask = (e) => {\r\n      let text = e.target.value\r\n      props.state.editTask(props.id, text)\r\n   }\r\n\r\n   return (\r\n         <div>\r\n            {isEdit ?\r\n               <input className = 'edit-task-true' autoFocus = {true} onBlur = {() => setEditmode(false)} onChange = {editTask} value = {props.text}></input> \r\n               : <li className = 'edit-task-false' onClick = {() => setEditmode(true)}>{props.text}</li>}\r\n            <button className = 'delete-task' onClick = {() => deleteTask(props.id)}>Delete a task</button>\r\n         </div>\r\n   )\r\n}\r\n)\r\n\r\n// Класс всего списка\r\n\r\n@observer class TodoList extends React.Component {\r\n\r\n   componentDidMount = () => {\r\n      this.props.store.getAppState()\r\n   }\r\n\r\n   componentDidUpdate = () => {\r\n      localStorage.setItem('todo', JSON.stringify(this.props.store.state.tasksList))\r\n   }\r\n\r\n   updateInput = (e) => {\r\n      let text = e.target.value;\r\n      this.props.store.updateTaskInput(text)\r\n   }\r\n\r\n   addTask = () => {\r\n      this.props.store.addTask()\r\n   }\r\n   render(){\r\n      const store = this.props.store\r\n      return(\r\n         <div className = {styles.todolist}>\r\n            <h2>ToDo APP:</h2>\r\n            <form>\r\n               <input className = 'main-input' autoFocus = {true} placeholder = {'Write your task here'} onChange = {this.updateInput} value = {store.state.currentTaskInput}></input>\r\n               <button onClick = {this.addTask} className = {'add-task'}>Add task</button>\r\n            </form>\r\n            <ul className = 'main-tasks_list'>\r\n               {store.state.tasksList.map(task => <Task key = {task.id} id = {task.id} text = {task.text} state = {this.props.store}/>)}\r\n            </ul>\r\n         </div>\r\n      )\r\n   }\r\n} \r\n\r\nclass App extends React.Component {\r\n   render() {\r\n      return(\r\n         <TodoList store = {appStore}/>\r\n      )\r\n   }\r\n}\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}